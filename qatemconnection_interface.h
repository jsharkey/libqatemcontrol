/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p qatemconnection_interface.h: com.blackmagicdesign.QAtemConnection.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QATEMCONNECTION_INTERFACE_H_1415248144
#define QATEMCONNECTION_INTERFACE_H_1415248144

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.blackmagicdesign.QAtemConnection
 */
class ComBlackmagicdesignQAtemConnectionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.blackmagicdesign.QAtemConnection"; }

public:
    ComBlackmagicdesignQAtemConnectionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComBlackmagicdesignQAtemConnectionInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> aquireMediaLock(uchar id, uchar index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("aquireMediaLock"), argumentList);
    }

    inline QDBusPendingReply<bool> audioMonitorDimmed()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("audioMonitorDimmed"), argumentList);
    }

    inline QDBusPendingReply<bool> audioMonitorEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("audioMonitorEnabled"), argumentList);
    }

    inline QDBusPendingReply<bool> audioMonitorMuted()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("audioMonitorMuted"), argumentList);
    }

    inline QDBusPendingReply<bool> audioTallyState(ushort index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("audioTallyState"), argumentList);
    }

    inline QDBusPendingReply<ushort> auxSource(uchar aux)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(aux);
        return asyncCallWithArgumentList(QLatin1String("auxSource"), argumentList);
    }

    inline QDBusPendingReply<> changePreviewInput(ushort index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("changePreviewInput"), argumentList);
    }

    inline QDBusPendingReply<> changeProgramInput(ushort index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("changeProgramInput"), argumentList);
    }

    inline QDBusPendingReply<> clearSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("clearSettings"), argumentList);
    }

    inline QDBusPendingReply<> connectToSwitcher(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("connectToSwitcher"), argumentList);
    }

    inline QDBusPendingReply<uchar> currentTransitionStyle()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("currentTransitionStyle"), argumentList);
    }

    inline QDBusPendingReply<bool> debugEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("debugEnabled"), argumentList);
    }

    inline QDBusPendingReply<uchar> dipFrames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dipFrames"), argumentList);
    }

    inline QDBusPendingReply<ushort> dipSource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dipSource"), argumentList);
    }

    inline QDBusPendingReply<> disconnectFromSwitcher()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("disconnectFromSwitcher"), argumentList);
    }

    inline QDBusPendingReply<> doAuto()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("doAuto"), argumentList);
    }

    inline QDBusPendingReply<> doCut()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("doCut"), argumentList);
    }

    inline QDBusPendingReply<> doDownstreamKeyAuto(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("doDownstreamKeyAuto"), argumentList);
    }

    inline QDBusPendingReply<short> downstreamKeyBottomMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyBottomMask"), argumentList);
    }

    inline QDBusPendingReply<ushort> downstreamKeyClip(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyClip"), argumentList);
    }

    inline QDBusPendingReply<bool> downstreamKeyEnableMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyEnableMask"), argumentList);
    }

    inline QDBusPendingReply<ushort> downstreamKeyFillSource(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyFillSource"), argumentList);
    }

    inline QDBusPendingReply<uchar> downstreamKeyFrameCount(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyFrameCount"), argumentList);
    }

    inline QDBusPendingReply<uchar> downstreamKeyFrames(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyFrames"), argumentList);
    }

    inline QDBusPendingReply<ushort> downstreamKeyGain(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyGain"), argumentList);
    }

    inline QDBusPendingReply<bool> downstreamKeyInvertKey(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyInvertKey"), argumentList);
    }

    inline QDBusPendingReply<ushort> downstreamKeyKeySource(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyKeySource"), argumentList);
    }

    inline QDBusPendingReply<short> downstreamKeyLeftMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyLeftMask"), argumentList);
    }

    inline QDBusPendingReply<bool> downstreamKeyOn(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyOn"), argumentList);
    }

    inline QDBusPendingReply<bool> downstreamKeyPreMultiplied(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyPreMultiplied"), argumentList);
    }

    inline QDBusPendingReply<short> downstreamKeyRightMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyRightMask"), argumentList);
    }

    inline QDBusPendingReply<bool> downstreamKeyTie(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyTie"), argumentList);
    }

    inline QDBusPendingReply<short> downstreamKeyTopMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("downstreamKeyTopMask"), argumentList);
    }

    inline QDBusPendingReply<uchar> dveEffect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveEffect"), argumentList);
    }

    inline QDBusPendingReply<ushort> dveFillSource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveFillSource"), argumentList);
    }

    inline QDBusPendingReply<bool> dveFlipFlopDirection()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveFlipFlopDirection"), argumentList);
    }

    inline QDBusPendingReply<bool> dveInvertKeyEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveInvertKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<bool> dveKeyEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<ushort> dveKeySource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveKeySource"), argumentList);
    }

    inline QDBusPendingReply<bool> dvePreMultipliedKeyEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dvePreMultipliedKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<ushort> dveRate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveRate"), argumentList);
    }

    inline QDBusPendingReply<bool> dveReverseDirection()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("dveReverseDirection"), argumentList);
    }

    inline QDBusPendingReply<bool> fadeToBlackEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("fadeToBlackEnabled"), argumentList);
    }

    inline QDBusPendingReply<bool> fadeToBlackFading()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("fadeToBlackFading"), argumentList);
    }

    inline QDBusPendingReply<uchar> fadeToBlackFrameCount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("fadeToBlackFrameCount"), argumentList);
    }

    inline QDBusPendingReply<uchar> fadeToBlackFrames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("fadeToBlackFrames"), argumentList);
    }

    inline QDBusPendingReply<uchar> framesPerSecond()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("framesPerSecond"), argumentList);
    }

    inline QDBusPendingReply<uchar> keyersOnCurrentTransition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("keyersOnCurrentTransition"), argumentList);
    }

    inline QDBusPendingReply<uchar> keyersOnNextTransition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("keyersOnNextTransition"), argumentList);
    }

    inline QDBusPendingReply<ushort> majorVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("majorVersion"), argumentList);
    }

    inline QDBusPendingReply<bool> mediaLockState(uchar id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("mediaLockState"), argumentList);
    }

    inline QDBusPendingReply<> mediaPlayerGoFrameBackward(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerGoFrameBackward"), argumentList);
    }

    inline QDBusPendingReply<> mediaPlayerGoFrameForward(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerGoFrameForward"), argumentList);
    }

    inline QDBusPendingReply<> mediaPlayerGoToBeginning(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerGoToBeginning"), argumentList);
    }

    inline QDBusPendingReply<uchar> mediaPlayerSelectedClip(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerSelectedClip"), argumentList);
    }

    inline QDBusPendingReply<uchar> mediaPlayerSelectedStill(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerSelectedStill"), argumentList);
    }

    inline QDBusPendingReply<uchar> mediaPlayerType(uchar player)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player);
        return asyncCallWithArgumentList(QLatin1String("mediaPlayerType"), argumentList);
    }

    inline QDBusPendingReply<uchar> mediaPoolClip1Size()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("mediaPoolClip1Size"), argumentList);
    }

    inline QDBusPendingReply<uchar> mediaPoolClip2Size()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("mediaPoolClip2Size"), argumentList);
    }

    inline QDBusPendingReply<ushort> minorVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("minorVersion"), argumentList);
    }

    inline QDBusPendingReply<uchar> mixFrames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("mixFrames"), argumentList);
    }

    inline QDBusPendingReply<uchar> multiViewInput(uchar multiViewOutput)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(multiViewOutput);
        return asyncCallWithArgumentList(QLatin1String("multiViewInput"), argumentList);
    }

    inline QDBusPendingReply<uchar> multiViewLayout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("multiViewLayout"), argumentList);
    }

    inline QDBusPendingReply<uchar> nextTransitionStyle()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("nextTransitionStyle"), argumentList);
    }

    inline QDBusPendingReply<ushort> previewInput()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("previewInput"), argumentList);
    }

    inline QDBusPendingReply<QString> productInformation()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("productInformation"), argumentList);
    }

    inline QDBusPendingReply<ushort> programInput()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("programInput"), argumentList);
    }

    inline QDBusPendingReply<int> remainingTransferDataSize()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("remainingTransferDataSize"), argumentList);
    }

    inline QDBusPendingReply<> runUpstreamKeyTo(uchar keyer, uchar position, uchar direction)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(position) << QVariant::fromValue(direction);
        return asyncCallWithArgumentList(QLatin1String("runUpstreamKeyTo"), argumentList);
    }

    inline QDBusPendingReply<> saveSettings()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("saveSettings"), argumentList);
    }

    inline QDBusPendingReply<ushort> sendDataToSwitcher(uchar storeId, uchar index, const QByteArray &name, const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(storeId) << QVariant::fromValue(index) << QVariant::fromValue(name) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("sendDataToSwitcher"), argumentList);
    }

    inline QDBusPendingReply<> setAudioInputState(ushort index, uchar state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setAudioInputState"), argumentList);
    }

    inline QDBusPendingReply<> setAudioLevelsEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setAudioLevelsEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setAudioMonitorDimmed(bool dimmed)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(dimmed);
        return asyncCallWithArgumentList(QLatin1String("setAudioMonitorDimmed"), argumentList);
    }

    inline QDBusPendingReply<> setAudioMonitorEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setAudioMonitorEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setAudioMonitorMuted(bool muted)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(muted);
        return asyncCallWithArgumentList(QLatin1String("setAudioMonitorMuted"), argumentList);
    }

    inline QDBusPendingReply<> setAuxSource(uchar aux, ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(aux) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setAuxSource"), argumentList);
    }

    inline QDBusPendingReply<> setBackgroundOnNextTransition(bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setBackgroundOnNextTransition"), argumentList);
    }

    inline QDBusPendingReply<> setDVEEffect(uchar effect)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(effect);
        return asyncCallWithArgumentList(QLatin1String("setDVEEffect"), argumentList);
    }

    inline QDBusPendingReply<> setDVEFillSource(ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setDVEFillSource"), argumentList);
    }

    inline QDBusPendingReply<> setDVEFlipFlopDirection(bool flipFlop)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flipFlop);
        return asyncCallWithArgumentList(QLatin1String("setDVEFlipFlopDirection"), argumentList);
    }

    inline QDBusPendingReply<> setDVEInvertKeyEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setDVEInvertKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setDVEKeyEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setDVEKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setDVEKeySource(ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setDVEKeySource"), argumentList);
    }

    inline QDBusPendingReply<> setDVEPreMultipliedKeyEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setDVEPreMultipliedKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setDVERate(ushort frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setDVERate"), argumentList);
    }

    inline QDBusPendingReply<> setDVEReverseDirection(bool reverse)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(reverse);
        return asyncCallWithArgumentList(QLatin1String("setDVEReverseDirection"), argumentList);
    }

    inline QDBusPendingReply<> setDebugEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setDebugEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setDipFrames(uchar frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setDipFrames"), argumentList);
    }

    inline QDBusPendingReply<> setDipSource(ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setDipSource"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyEnableMask(uchar keyer, bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(enable);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyEnableMask"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyFillSource(uchar keyer, ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyFillSource"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyFrameRate(uchar keyer, uchar frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyFrameRate"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyInvertKey(uchar keyer, bool invert)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(invert);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyInvertKey"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyKeySource(uchar keyer, ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyKeySource"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyOn(uchar keyer, bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyOn"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyPreMultiplied(uchar keyer, bool preMultiplied)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(preMultiplied);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyPreMultiplied"), argumentList);
    }

    inline QDBusPendingReply<> setDownstreamKeyTie(uchar keyer, bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setDownstreamKeyTie"), argumentList);
    }

    inline QDBusPendingReply<> setFadeToBlackFrameRate(uchar frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setFadeToBlackFrameRate"), argumentList);
    }

    inline QDBusPendingReply<> setInputLongName(ushort input, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(input) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("setInputLongName"), argumentList);
    }

    inline QDBusPendingReply<> setInputShortName(ushort input, const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(input) << QVariant::fromValue(name);
        return asyncCallWithArgumentList(QLatin1String("setInputShortName"), argumentList);
    }

    inline QDBusPendingReply<> setInputType(ushort input, uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(input) << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("setInputType"), argumentList);
    }

    inline QDBusPendingReply<> setMediaPlayerLoop(uchar player, bool loop)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player) << QVariant::fromValue(loop);
        return asyncCallWithArgumentList(QLatin1String("setMediaPlayerLoop"), argumentList);
    }

    inline QDBusPendingReply<> setMediaPlayerPlay(uchar player, bool play)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player) << QVariant::fromValue(play);
        return asyncCallWithArgumentList(QLatin1String("setMediaPlayerPlay"), argumentList);
    }

    inline QDBusPendingReply<> setMediaPlayerSource(uchar player, bool clip, uchar source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(player) << QVariant::fromValue(clip) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setMediaPlayerSource"), argumentList);
    }

    inline QDBusPendingReply<> setMediaPoolClipSplit(uchar size)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(size);
        return asyncCallWithArgumentList(QLatin1String("setMediaPoolClipSplit"), argumentList);
    }

    inline QDBusPendingReply<> setMixFrames(uchar frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setMixFrames"), argumentList);
    }

    inline QDBusPendingReply<> setMultiViewLayout(uchar layout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(layout);
        return asyncCallWithArgumentList(QLatin1String("setMultiViewLayout"), argumentList);
    }

    inline QDBusPendingReply<> setStingerClipDuration(ushort frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setStingerClipDuration"), argumentList);
    }

    inline QDBusPendingReply<> setStingerInvertKeyEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setStingerInvertKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setStingerMixRate(ushort frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setStingerMixRate"), argumentList);
    }

    inline QDBusPendingReply<> setStingerPreMultipliedKeyEnabled(bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setStingerPreMultipliedKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setStingerPreRoll(ushort frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setStingerPreRoll"), argumentList);
    }

    inline QDBusPendingReply<> setStingerSource(uchar source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setStingerSource"), argumentList);
    }

    inline QDBusPendingReply<> setStingerTriggerPoint(ushort frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setStingerTriggerPoint"), argumentList);
    }

    inline QDBusPendingReply<> setTransitionPosition(ushort position)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(position);
        return asyncCallWithArgumentList(QLatin1String("setTransitionPosition"), argumentList);
    }

    inline QDBusPendingReply<> setTransitionPreview(bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setTransitionPreview"), argumentList);
    }

    inline QDBusPendingReply<> setTransitionType(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("setTransitionType"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyChromaNarrowRange(uchar keyer, bool narrowRange)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(narrowRange);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyChromaNarrowRange"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEBorderBevelSoften(uchar keyer, uchar soften)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(soften);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEBorderBevelSoften"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEBorderEnabled(uchar keyer, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEBorderEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEBorderOpacity(uchar keyer, uchar opacity)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(opacity);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEBorderOpacity"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEBorderSoften(uchar keyer, uchar outside, uchar inside)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(outside) << QVariant::fromValue(inside);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEBorderSoften"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEBorderStyle(uchar keyer, uchar style)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(style);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEBorderStyle"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEDropShadowEnabled(uchar keyer, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEDropShadowEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVEKeyFrame(uchar keyer, uchar keyFrame)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(keyFrame);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVEKeyFrame"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyDVERate(uchar keyer, uchar rate)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(rate);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyDVERate"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyEnableMask(uchar keyer, bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(enable);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyEnableMask"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyFillSource(uchar keyer, ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyFillSource"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyFlyEnabled(uchar keyer, bool enable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(enable);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyFlyEnabled"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyKeySource(uchar keyer, ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyKeySource"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyLumaInvertKey(uchar keyer, bool invert)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(invert);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyLumaInvertKey"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyLumaPreMultipliedKey(uchar keyer, bool preMultiplied)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(preMultiplied);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyLumaPreMultipliedKey"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyOn(uchar keyer, bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyOn"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyOnNextTransition(uchar keyer, bool state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(state);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyOnNextTransition"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyPatternInvertPattern(uchar keyer, bool invert)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(invert);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyPatternInvertPattern"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyPatternPattern(uchar keyer, uchar pattern)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(pattern);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyPatternPattern"), argumentList);
    }

    inline QDBusPendingReply<> setUpstreamKeyType(uchar keyer, uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer) << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("setUpstreamKeyType"), argumentList);
    }

    inline QDBusPendingReply<> setVideoDownConvertType(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("setVideoDownConvertType"), argumentList);
    }

    inline QDBusPendingReply<> setVideoFormat(uchar format)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(format);
        return asyncCallWithArgumentList(QLatin1String("setVideoFormat"), argumentList);
    }

    inline QDBusPendingReply<> setWipeBorderSoftness(ushort softness)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(softness);
        return asyncCallWithArgumentList(QLatin1String("setWipeBorderSoftness"), argumentList);
    }

    inline QDBusPendingReply<> setWipeBorderSource(ushort source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QLatin1String("setWipeBorderSource"), argumentList);
    }

    inline QDBusPendingReply<> setWipeBorderWidth(ushort width)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(width);
        return asyncCallWithArgumentList(QLatin1String("setWipeBorderWidth"), argumentList);
    }

    inline QDBusPendingReply<> setWipeFlipFlop(bool flipFlop)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flipFlop);
        return asyncCallWithArgumentList(QLatin1String("setWipeFlipFlop"), argumentList);
    }

    inline QDBusPendingReply<> setWipeFrames(uchar frames)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(frames);
        return asyncCallWithArgumentList(QLatin1String("setWipeFrames"), argumentList);
    }

    inline QDBusPendingReply<> setWipeReverseDirection(bool reverse)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(reverse);
        return asyncCallWithArgumentList(QLatin1String("setWipeReverseDirection"), argumentList);
    }

    inline QDBusPendingReply<> setWipeSymmetry(ushort value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setWipeSymmetry"), argumentList);
    }

    inline QDBusPendingReply<> setWipeType(uchar type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("setWipeType"), argumentList);
    }

    inline QDBusPendingReply<> setWipeXPosition(ushort value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setWipeXPosition"), argumentList);
    }

    inline QDBusPendingReply<> setWipeYPosition(ushort value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setWipeYPosition"), argumentList);
    }

    inline QDBusPendingReply<> signalTransitionPositionChangeDone()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("signalTransitionPositionChangeDone"), argumentList);
    }

    inline QDBusPendingReply<ushort> stingerClipDuration()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerClipDuration"), argumentList);
    }

    inline QDBusPendingReply<bool> stingerInvertKeyEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerInvertKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<ushort> stingerMixRate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerMixRate"), argumentList);
    }

    inline QDBusPendingReply<bool> stingerPreMultipliedKeyEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerPreMultipliedKeyEnabled"), argumentList);
    }

    inline QDBusPendingReply<ushort> stingerPreRoll()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerPreRoll"), argumentList);
    }

    inline QDBusPendingReply<uchar> stingerSource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerSource"), argumentList);
    }

    inline QDBusPendingReply<ushort> stingerTriggerPoint()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stingerTriggerPoint"), argumentList);
    }

    inline QDBusPendingReply<uchar> tallyState(uchar id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("tallyState"), argumentList);
    }

    inline QDBusPendingReply<uchar> tallyStateCount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("tallyStateCount"), argumentList);
    }

    inline QDBusPendingReply<> toggleFadeToBlack()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("toggleFadeToBlack"), argumentList);
    }

    inline QDBusPendingReply<bool> transferActive()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("transferActive"), argumentList);
    }

    inline QDBusPendingReply<ushort> transferId()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("transferId"), argumentList);
    }

    inline QDBusPendingReply<uchar> transitionFrameCount()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("transitionFrameCount"), argumentList);
    }

    inline QDBusPendingReply<ushort> transitionPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("transitionPosition"), argumentList);
    }

    inline QDBusPendingReply<bool> transitionPreviewEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("transitionPreviewEnabled"), argumentList);
    }

    inline QDBusPendingReply<> unlockMediaLock(uchar id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("unlockMediaLock"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyChromaNarrowRange(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyChromaNarrowRange"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVEBorderBevelSofter(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderBevelSofter"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyDVEBorderEnabled(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderEnabled"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVEBorderInsideSoften(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderInsideSoften"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVEBorderOpacity(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderOpacity"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVEBorderOutsideSoften(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderOutsideSoften"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVEBorderStyle(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEBorderStyle"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyDVEDropShadowEnabled(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEDropShadowEnabled"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyDVEKeyFrameASet(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEKeyFrameASet"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyDVEKeyFrameBSet(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVEKeyFrameBSet"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVELightSourceAltitude(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVELightSourceAltitude"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyDVERate(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyDVERate"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyEnableFly(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyEnableFly"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyEnableMask(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyEnableMask"), argumentList);
    }

    inline QDBusPendingReply<ushort> upstreamKeyFillSource(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyFillSource"), argumentList);
    }

    inline QDBusPendingReply<ushort> upstreamKeyKeySource(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyKeySource"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyLumaInvertKey(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyLumaInvertKey"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyLumaPreMultipliedKey(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyLumaPreMultipliedKey"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyOn(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyOn"), argumentList);
    }

    inline QDBusPendingReply<bool> upstreamKeyPatternInvertPattern(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyPatternInvertPattern"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyPatternPattern(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyPatternPattern"), argumentList);
    }

    inline QDBusPendingReply<uchar> upstreamKeyType(uchar keyer)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyer);
        return asyncCallWithArgumentList(QLatin1String("upstreamKeyType"), argumentList);
    }

    inline QDBusPendingReply<uchar> videoDownConvertType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("videoDownConvertType"), argumentList);
    }

    inline QDBusPendingReply<uchar> videoFormat()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("videoFormat"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeBorderSoftness()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeBorderSoftness"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeBorderSource()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeBorderSource"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeBorderWidth()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeBorderWidth"), argumentList);
    }

    inline QDBusPendingReply<bool> wipeFlipFlop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeFlipFlop"), argumentList);
    }

    inline QDBusPendingReply<uchar> wipeFrames()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeFrames"), argumentList);
    }

    inline QDBusPendingReply<bool> wipeReverseDirection()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeReverseDirection"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeSymmetry()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeSymmetry"), argumentList);
    }

    inline QDBusPendingReply<uchar> wipeType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeType"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeXPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeXPosition"), argumentList);
    }

    inline QDBusPendingReply<ushort> wipeYPosition()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wipeYPosition"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void audioLevelsChanged();
    void audioMonitorDimmedChanged(bool dimmed);
    void audioMonitorEnabledChanged(bool enabled);
    void audioMonitorMutedChanged(bool muted);
    void auxSourceChanged(uchar aux, ushort source);
    void connected();
    void currentTransitionStyleChanged(uchar style);
    void dataTransferFinished(ushort transferId);
    void dipFramesChanged(uchar frames);
    void dipSourceChanged(ushort source);
    void disconnected();
    void downstreamKeyEnableMaskChanged(uchar keyer, bool enable);
    void downstreamKeyFrameCountChanged(uchar keyer, uchar count);
    void downstreamKeyFramesChanged(uchar keyer, uchar frames);
    void downstreamKeyInvertKeyChanged(uchar keyer, bool invert);
    void downstreamKeyOnChanged(uchar keyer, bool state);
    void downstreamKeyPreMultipliedChanged(uchar keyer, bool preMultiplied);
    void downstreamKeySourcesChanged(uchar keyer, ushort fill, ushort key);
    void downstreamKeyTieChanged(uchar keyer, bool state);
    void dveEffectChanged(uchar effect);
    void dveEnableInvertKeyChanged(bool enabled);
    void dveEnableKeyChanged(bool enabled);
    void dveEnablePreMultipliedKeyChanged(bool enabled);
    void dveFillSourceChanged(ushort source);
    void dveFlipFlopDirectionChanged(bool flipFlop);
    void dveKeySourceChanged(ushort source);
    void dveRateChanged(ushort frames);
    void dveReverseDirectionChanged(bool reverse);
    void fadeToBlackChanged(bool fading, bool enabled);
    void fadeToBlackFrameCountChanged(uchar count);
    void fadeToBlackFramesChanged(uchar frames);
    void keyersOnCurrentTransitionChanged(uchar keyers);
    void keyersOnNextTransitionChanged(uchar keyers);
    void mediaLockStateChanged(uchar id, bool state);
    void mediaPlayerChanged(uchar player, uchar type, uchar still, uchar clip);
    void mediaPoolClip1SizeChanged(uchar size);
    void mediaPoolClip2SizeChanged(uchar size);
    void mixFramesChanged(uchar frames);
    void nextTransitionStyleChanged(uchar style);
    void previewInputChanged(ushort oldIndex, ushort newIndex);
    void productInformationChanged(const QString &info);
    void programInputChanged(ushort oldIndex, ushort newIndex);
    void socketError(const QString &errorString);
    void stingerClipDurationChanged(ushort frames);
    void stingerEnableInvertKeyChanged(bool enabled);
    void stingerEnablePreMultipliedKeyChanged(bool enabled);
    void stingerMixRateChanged(ushort frames);
    void stingerPreRollChanged(ushort frames);
    void stingerSourceChanged(uchar source);
    void stingerTriggerPointChanged(ushort frames);
    void tallyStatesChanged();
    void timeChanged(uint time);
    void transitionFrameCountChanged(uchar count);
    void transitionPositionChanged(ushort count);
    void transitionPreviewChanged(bool state);
    void upstreamKeyChromaNarrowRangeChanged(uchar keyer, bool narrowRange);
    void upstreamKeyDVEBorderInsideSoftenChanged(uchar keyer, uchar soften);
    void upstreamKeyDVEBorderOpacityChanged(uchar keyer, uchar opacity);
    void upstreamKeyDVEBorderOutsideSoftenChanged(uchar keyer, uchar soften);
    void upstreamKeyDVEBorderStyleChanged(uchar keyer, uchar style);
    void upstreamKeyDVEEnableBorderChanged(uchar keyer, bool enable);
    void upstreamKeyDVEEnableDropShadowChanged(uchar keyer, bool enable);
    void upstreamKeyDVEKeyFrameASetChanged(uchar keyer, bool set);
    void upstreamKeyDVEKeyFrameBSetChanged(uchar keyer, bool set);
    void upstreamKeyDVELightSourceAltitudeChanged(uchar keyer, uchar altitude);
    void upstreamKeyDVERateChanged(uchar keyer, uchar rate);
    void upstreamKeyEnableFlyChanged(uchar keyer, bool enabled);
    void upstreamKeyEnableMaskChanged(uchar keyer, bool enable);
    void upstreamKeyFillSourceChanged(uchar keyer, ushort source);
    void upstreamKeyKeySourceChanged(uchar keyer, ushort source);
    void upstreamKeyLumaInvertKeyChanged(uchar keyer, bool invert);
    void upstreamKeyLumaPreMultipliedKeyChanged(uchar keyer, bool preMultiplied);
    void upstreamKeyOnChanged(uchar keyer, bool state);
    void upstreamKeyPatternInvertPatternChanged(uchar keyer, bool invert);
    void upstreamKeyPatternPatternChanged(uchar keyer, uchar pattern);
    void upstreamKeyTypeChanged(uchar keyer, uchar type);
    void versionChanged(ushort major, ushort minor);
    void videoDownConvertTypeChanged(uchar type);
    void videoFormatChanged(uchar format);
    void wipeBorderSoftnessChanged(ushort softness);
    void wipeBorderSourceChanged(ushort index);
    void wipeBorderWidthChanged(ushort width);
    void wipeFlipFlopChanged(bool flipFlop);
    void wipeFramesChanged(uchar frames);
    void wipeReverseDirectionChanged(bool reverse);
    void wipeSymmetryChanged(ushort value);
    void wipeTypeChanged(uchar type);
    void wipeXPositionChanged(ushort value);
    void wipeYPositionChanged(ushort value);
};

namespace com {
  namespace blackmagicdesign {
    typedef ::ComBlackmagicdesignQAtemConnectionInterface QAtemConnection;
  }
}
#endif
